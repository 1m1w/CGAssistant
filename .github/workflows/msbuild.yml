name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Git for Windows SDK
      # You may pin to the exact commit or the version.
      # uses: git-for-windows/setup-git-for-windows-sdk@cd2fc65085a5ceb095576ff6f5accbfbe693ed23
      uses: git-for-windows/setup-git-for-windows-sdk@v0.0.9
      with:
        # The subset (if any) of the SDK: minimal, makepkg-git, build-installers, or full
        flavor: full
        architecture: i686
        cache: auto
    
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '[14.1,14.2)'
        # Version of Visual Studio to search; defaults to latest if not specified

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache

    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@88f3374475d094ce56ca6a7cc41cfda5a6ec093c
      uses: jurplel/install-qt-action@v2.13.0
      with:
        # optional
        # Version of Qt to install
        version: 5.12.9
        # optional, default is 5.15.2
        # Host platform
        host: windows
        # optional
        # Target platform for build
        target: desktop
        # optional, default is desktop
        # Architecture for Windows/Android
        arch: win32_msvc2017
        # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: # optional, default is true
        # Additional Qt modules to install
        modules: # optional
        # Whether or not to actually download Qt
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: init-dep
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: git submodule update --init --recursive
      
    - name: build-boost
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: build-boost.bat
      shell: cmd

    - name: build-CGAHook
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: MSBuild.exe CGAssistant.sln /t:CGAHook /p:Configuration=Release /p:Platform="x86" /p:PlatformToolset=v141

    - name: build-qhttp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: | 
        mkdir 3rdparty
        cd 3rdparty
        git clone https://github.com/nodejs/http-parser.git
        cd ..
        qmake qhttp.pro -spec win32-msvc "CONFIG+=qtquickcompiler"
        jom -f MakeFile qmake_all
        jom
        copy "xbin\qhttp.dll" "..\build\"
      shell: cmd
