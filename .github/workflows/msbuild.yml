name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup VS Dev Environment
      uses: seanmiddleditch/gha-setup-vsdevenv@v3
      with:
        # Name or path to vswhere.exr
        vswhere: # optional, default is vswhere.exe
        # Target build architecture
        arch: x86_amd64 # optional, default is amd64
        # Host architecture (x86, x86_amd64, or amd64)
        host_arch: # optional, default is 
        # Overrides the default WinSDK version
        winsdk: '10.0.17134.0'
         # optional, default is 
        # Overrides the default toolset version
        toolset_version: vc141 # optional, default is 
        # List of components required in the selected VS installation (semi-colon separated)
        components: # optional, default is Microsoft.VisualStudio.Component.VC.Tools.x86.x64

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: 
        # Version of Visual Studio to search; defaults to latest if not specified

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache

    - name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@88f3374475d094ce56ca6a7cc41cfda5a6ec093c
      uses: jurplel/install-qt-action@v2.13.0
      with:
        # optional
        # Version of Qt to install
        version: 5.12.1
        # optional, default is 5.15.2
        # Host platform
        host: windows
        # optional
        # Target platform for build
        target: desktop
        # optional, default is desktop
        # Architecture for Windows/Android
        arch: win32_msvc2017
        # optional
        # Whether or not to install Qt dependencies on Linux
        install-deps: # optional, default is true
        # Additional Qt modules to install
        modules: # optional
        # Whether or not to actually download Qt
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        tools : 'tools_qtcreator,4.14.1-0,qt.tools.qtcreator'

    - name: Link Windows SDK
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        mklink /d "%GITHUB_WORKSPACE%\winsdk" "${{env.WindowsSdkDir}}"
      shell: cmd

    - name: init-dep
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        npm install -g node-gyp
        npm config set msvs_version 2017
        git submodule update --init --recursive
        cd qhttp
        mkdir 3rdparty
        cd 3rdparty
        git clone https://github.com/nodejs/http-parser.git
      shell: cmd

    - name: build-qhttp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        set PATH=%GITHUB_WORKSPACE%\winsdk\bin\10.0.17763.0\x86;%PATH%
        for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
          set InstallDir=%%i
        )
        if exist "%InstallDir%\Common7\Tools\vsdevcmd.bat" (  
          "%InstallDir%\Common7\Tools\vsdevcmd.bat" -arch=x86
          cd qhttp
          qmake qhttp.pro -spec win32-msvc "CONFIG+=32bit" "CONFIG+=qtquickcompiler" "INCLUDEPATH+=%GITHUB_WORKSPACE%\winsdk\Include\10.0.17134.0\ucrt" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17134.0\um\x86" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17134.0\ucrt\x86"
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe" -f MakeFile qmake_all
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe"
          copy "%GITHUB_WORKSPACE%\qhttp\xbin\qhttp.dll" "%GITHUB_WORKSPACE%\build\"
        )
      shell: cmd

    - name: build-boost
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: build-boost.bat
      shell: cmd

    - name: build-CGAHook
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: MSBuild.exe CGAssistant.sln /t:CGAHook /p:Configuration=Release /p:Platform="x86" /p:PlatformToolset=v141

    - name: build-CGAssistant
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
          set InstallDir=%%i
        )
        if exist "%InstallDir%\Common7\Tools\vsdevcmd.bat" (          
          "%InstallDir%\Common7\Tools\vsdevcmd.bat" -arch=x86
          cd CGAssistant
          qmake CGAssistant.pro -spec win32-msvc "CONFIG+=32bit" "CONFIG+=qtquickcompiler" "INCLUDEPATH+=%GITHUB_WORKSPACE%\winsdk\Include\10.0.17134.0\ucrt" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17134.0\um\x86" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17134.0\ucrt\x86"
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe" -f MakeFile qmake_all
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe"
          copy "%GITHUB_WORKSPACE%\CGassistant\release\CGassistant.exe" "%GITHUB_WORKSPACE%\build\"
        )
      shell: cmd