name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: init-dep
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        git submodule update --init --recursive
      shell: cmd

    - name: init-qhttp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd qhttp
        mkdir 3rdparty
        cd 3rdparty
        git clone https://github.com/nodejs/http-parser.git
      shell: cmd

    - name: init-boost
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd boost
        bootstrap.bat
      shell: cmd

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: 

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.13.0
      with:
        version: 5.15.0
        host: windows
        target: desktop
        arch: win32_msvc2019
        install-deps: # optional, default is true
        modules: # optional
        cached: false # ${{ steps.cache-qt.outputs.cache-hit }}
        tools : 'tools_qtcreator,4.14.1-0,qt.tools.qtcreator'

    - name: build-boost
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
          set InstallDir=%%i
        )
        if exist "%InstallDir%\Common7\Tools\vsdevcmd.bat" (  
          "%InstallDir%\Common7\Tools\vsdevcmd.bat" -arch=x86 -winsdk=10.0.17763.0
          cd boost
          b2 --toolset=msvc-14.2 --with-date_time --with-thread --with-container --with-system --with-locale --with-serialization --with-regex --stagedir="stage" link=static variant=release address-model=32 stage
          b2 --toolset=msvc-14.2 --with-date_time --with-thread --with-container --with-system --with-locale --with-serialization --with-regex --stagedir="stage" runtime-link=static link=static variant=release address-model=32 stage
        )
      shell: cmd

    - name: build-CGAHook
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: MSBuild.exe CGAssistant.sln /t:CGAHook /p:Configuration=Release /p:Platform="x86" /p:PlatformToolset=v142

    - name: build-qhttp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
          set InstallDir=%%i
        )
        if exist "%InstallDir%\Common7\Tools\vsdevcmd.bat" (  
          "%InstallDir%\Common7\Tools\vsdevcmd.bat" -arch=x86 -winsdk=10.0.17763.0
          cd qhttp
          qmake qhttp.pro -spec win32-msvc "CONFIG+=32bit" "CONFIG+=qtquickcompiler" "INCLUDEPATH+=%GITHUB_WORKSPACE%\winsdk\Include\10.0.17763.0\ucrt" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17763.0\um\x86" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17763.0\ucrt\x86"
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe" -f MakeFile qmake_all
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe"
          copy "%GITHUB_WORKSPACE%\qhttp\xbin\qhttp.dll" "%GITHUB_WORKSPACE%\build\"
        )
      shell: cmd

    - name: build-CGAssistant
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
          set InstallDir=%%i
        )
        if exist "%InstallDir%\Common7\Tools\vsdevcmd.bat" (          
          "%InstallDir%\Common7\Tools\vsdevcmd.bat" -arch=x86 -winsdk=10.0.17763.0
          cd CGAssistant
          qmake CGAssistant.pro -spec win32-msvc "CONFIG+=32bit" "CONFIG+=qtquickcompiler" "INCLUDEPATH+=%GITHUB_WORKSPACE%\winsdk\Include\10.0.17763.0\ucrt" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17763.0\um\x86" "LIBS += -L%GITHUB_WORKSPACE%\winsdk\Lib\10.0.17763.0\ucrt\x86"
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe" -f MakeFile qmake_all
          "${{env.IQTA_TOOLS}}\QtCreator\bin\jom.exe"
          copy "%GITHUB_WORKSPACE%\CGassistant\release\CGassistant.exe" "%GITHUB_WORKSPACE%\build\"
        )
      shell: cmd
      
    - name: init-nodegyp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: npm install -g node-gyp

    - name: build-nodegyp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: build-nodegyp.bat
      shell: cmd

    - name: Archive Release
      uses: thedoctor0/zip-release@master
      with:
        filename: 'CGAssistant-release.zip'
        path : 'build'

    - name: Release Action
      uses: ncipollo/release-action@v1
      with:
        artifacts: "CGAssistant-release.zip"
        bodyFile: "body.md"
        token: ${{ secrets.GITHUB_TOKEN }}